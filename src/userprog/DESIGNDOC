                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jaden Geller <jgeller@caltech.edu>
Alex Ryan <atryan@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 0 

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  https://github.com/ialexryan/CS124-Project
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
    We ran out of time to fix all of the tests, but got the vast majority
    of the assignment done. We did not implement filesystem synchronization,
    denying writes to executables, or verifying the stack pointer, although
    we're confident each of those things could be done with only about 20
    minutes more of work.    

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			   USER PROGRAMS
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.
   Alex Ryan - 24
   Jaden Geller - 20

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
   Alex - argument parsing and passing (setting up the stack), implement
   file descriptors + all filesystem-related syscalls
   Jaden - implementation of exit, exec, and wait, implementation of the
   system call handling architecture.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
None!

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
Argument parsing is achieved with strtok_r inside the load() function,
after the setup_stack() function. This is an example of how our stack
is configured after all the arguments are parsed and pushed onto the stack
for "echo -l foo barrr":

Address     Name          Data        Type
0xbffffffb  argv[0][...]  echo\0      char[5]
0xbffffff8  argv[1][...]  -l\0        char[3]
0xbffffff4  argv[2][...]  foo\0       char[4]
0xbfffffee  argv[3][...]  barrr\0     char[6]
0xbfffffec  word-align    0 0         uint8_t
0xbfffffe8  argv[4]       0           char *
0xbfffffe4  argv[3]       0xbfffffee  char *
0xbfffffe0  argv[2]       0xbffffff4  char *
0xbfffffdc  argv[1]       0xbffffff8  char *
0xbfffffd8  argv[0]       0xbffffffb  char *
0xbfffffd4  argv          0xbfffffd8  char **
0xbfffffd0  argc          4           int
0xbfffffcc  returnaddr    0           void (*) ()

Our argv elements are pushed onto the stack backwards, in the order that
strtok_r encounters them, for convenience since order doesn't matter.
We keep track of their addresses in a fixed-size array and later loop
over that array backwards, pushing its contents onto the stack to make sure
argv is in the correct order.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
Strtok_r is threadsafe (reentrant)!

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
This allows the shell to resolve shell variables like $PATH and to set up
piping and redirecting output.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

added struct file* file_descriptors[MAX_OPEN_FILES];  to struct thread
This fixed-size array keeps track of pointers to all the thread's open files.
File descriptors are indices into this array.

Thread:
struct list children; // List of the children
struct list_elem child_elem; // Member of children list
struct semaphore dying; // Signaled when child dies. Waited on by parent.
struct semaphore loaded; // Signaled when exec thread loads. Waited on by parent.
bool orphan; // Set on children by parent when it dies. Indicates if thread is orphan.
int load_status;
int exit_status;

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
File descriptors are only unique to a certain thread. When a process
opens a file, the pointer to the created struct file is stored in the
file_descriptors array on its thread struct and the index in that array
is the file descriptor.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The wait system call first finds the thread struct for the given process.
Since each process stores its children, this is done by looping over the
children until it finds one with the requested id. Once it is found, we
sema_down the `dying` semaphore which will block if and only if the child
is still alive. Thus, once we pass, we can assume that the exit code is
set. Thus, we return the exit status.

If we do not find the requested thread in the list of children, we return
-1. Note that this will result in duplicate calls to wait returning -1 after
the first since we remove a thread from the children list after its been
reaped. Also note that, if any threads are not reaped with wait, we will
reap them when the parent dies.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We ensure this with a similar mechanism as the wait implementation.
Essentially, we have a load_status bool and a loaded semaphore on
our thread struct, and the caller of exec will sema_down this loaded
semaphore and the child will sema_up it once it has set the load_status
code. This way, we know the code will be set once we pass the semaphore,
so we can check the code and return the correct value.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When P calls wait(C) before C exits, P will be blocked by C's dying semaphore.
P will not be unblocked until C sets its exit code and signals its dying
semaphore. Thus, when P passes the semaphore, the exit code will be set. The
status of C is set to WAITING and the thread struct for C will be cleaned up
after its parent C dies.

When P calls wait(C) after C exits, C will have already set its exit code and
signaled the dying semaphore. Since the semaphore was signaled, P will pass
right through when it tries to acquire the semaphore, and will be able to
obtain the exit code on C. Note that C's thread struct is not been deallocated
since it was not orphaned. Instead, the thread status is set to WAITING and its
struct will be cleaned up when the parent dies.

When P terminates without waiting before C exits, it will loop over its children
and reap any that are WAITING automatically. Since C isn't yet WAITING, it will
not be reaped. Instead, it will be orphaned by setting it's orphan bool to true.
When C later exits, it will be set to DYING rather than WAITING since it is an
orphan, so it will be cleaned up.

When P terminates without waiting after C exits, C will be in a WAITING status
since P might've tried to check its exit code. Since P didn't wait, the resources
are not cleaned up yet, so on exit P will loop over its WAITING children and reap
them, cleaning up C's thread struct.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
It involves a hard limit on the number of open files that a process can have.
Making file descriptors global instead of per-process could also possibly
be useful for cross-process communication. 

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

